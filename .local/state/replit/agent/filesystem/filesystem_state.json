{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Knowledge Base Application\n\n## Overview\n\nThis is a comprehensive enterprise knowledge base application built with React, Express.js, and PostgreSQL. The system provides role-based content management capabilities with file upload support, category-based organization, and a modern web interface. The application is designed for team collaboration with admin controls for user management and content organization.\n\nThe system features a full-stack TypeScript implementation with a React frontend using shadcn/ui components, an Express.js API backend, and PostgreSQL database with Drizzle ORM. It includes authentication via Replit Auth, file storage with Google Cloud Storage integration, and comprehensive permission controls.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite build system\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **File Upload**: Uppy with AWS S3 integration for direct-to-cloud uploads\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript in ESM mode\n- **Database ORM**: Drizzle ORM with PostgreSQL adapter\n- **Authentication**: Replit Auth with OpenID Connect integration\n- **Session Management**: express-session with PostgreSQL session store\n- **API Design**: RESTful endpoints with consistent error handling\n- **File Processing**: Multer for multipart form handling\n\n### Database Design\n- **Primary Database**: PostgreSQL via Neon serverless\n- **Schema Management**: Drizzle Kit for migrations and schema generation\n- **Key Tables**: \n  - Users with role-based access (admin/user)\n  - Categories with hierarchical organization\n  - Articles with versioning and rich content\n  - Files with metadata and article associations\n  - Permissions for fine-grained access control\n- **Relationships**: Foreign key constraints with proper cascading\n\n### Authentication & Authorization\n- **Provider**: Replit Auth with OIDC integration\n- **Session Storage**: Secure HTTP-only cookies with PostgreSQL backing\n- **Role System**: Two-tier system (admin/user) with category-level permissions\n- **Permission Types**: Read, write, and none access levels per category\n- **User Management**: Admin-controlled user creation and role assignment\n\n### File Storage & Management\n- **Primary Storage**: Google Cloud Storage via Replit Object Storage\n- **Upload Strategy**: Direct-to-cloud uploads with presigned URLs\n- **File Types**: Support for documents (PDF, DOC, DOCX), images, and videos\n- **Access Control**: Custom ACL policies with group-based permissions\n- **Metadata**: Full file tracking with size limits and type validation\n\n## External Dependencies\n\n### Core Runtime Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connectivity\n- **drizzle-orm**: TypeScript ORM with schema validation\n- **express**: Web application framework\n- **@tanstack/react-query**: Server state management\n- **zod**: Schema validation and type safety\n\n### Authentication & Security\n- **openid-client**: OIDC authentication flows\n- **passport**: Authentication middleware\n- **express-session**: Session management\n- **connect-pg-simple**: PostgreSQL session storage\n\n### File Upload & Storage\n- **@google-cloud/storage**: Google Cloud Storage client\n- **@uppy/core**: File upload handling\n- **@uppy/aws-s3**: S3-compatible uploads\n- **multer**: Multipart form data processing\n\n### UI & Styling\n- **@radix-ui/react-***: Accessible UI component primitives\n- **tailwindcss**: Utility-first CSS framework\n- **lucide-react**: Icon library\n- **wouter**: Lightweight routing solution\n\n### Development Tools\n- **vite**: Frontend build tooling with HMR\n- **tsx**: TypeScript execution for development\n- **esbuild**: Production bundling for server code\n- **drizzle-kit**: Database schema management","size_bytes":4063},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        error: {\n          DEFAULT: \"var(--error)\",\n          foreground: \"var(--error-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      boxShadow: {\n        '2xs': 'var(--shadow-2xs)',\n        'xs': 'var(--shadow-xs)',\n        'sm': 'var(--shadow-sm)',\n        DEFAULT: 'var(--shadow)',\n        'md': 'var(--shadow-md)',\n        'lg': 'var(--shadow-lg)',\n        'xl': 'var(--shadow-xl)',\n        '2xl': 'var(--shadow-2xl)',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3418},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport connectPg from \"connect-pg-simple\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nexport async function hashPassword(password: string): Promise<string> {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nexport async function comparePasswords(supplied: string, stored: string): Promise<boolean> {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nasync function createDefaultUsers() {\n  try {\n    // Check if admin user exists\n    const adminUser = await storage.getUserByEmail('admin@example.com');\n    if (!adminUser) {\n      const hashedPassword = await hashPassword('admin123');\n      await storage.createUser({\n        email: 'admin@example.com',\n        passwordHash: hashedPassword,\n        role: 'admin',\n      });\n      console.log('✓ Created default admin user (email: admin@example.com, password: admin123)');\n    }\n\n    // Check if regular user exists\n    const regularUser = await storage.getUserByEmail('user@example.com');\n    if (!regularUser) {\n      const hashedPassword = await hashPassword('user123');\n      await storage.createUser({\n        email: 'user@example.com',\n        passwordHash: hashedPassword,\n        role: 'user',\n      });\n      console.log('✓ Created default user (email: user@example.com, password: user123)');\n    }\n  } catch (error) {\n    console.error('Error creating default users:', error);\n  }\n}\n\nexport function setupAuth(app: Express) {\n  // Session configuration\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || 'development-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    store: sessionStore,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: sessionTtl,\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy({ usernameField: 'email' }, async (email, password, done) => {\n      try {\n        const user = await storage.getUserByEmail(email);\n        if (!user || !(await comparePasswords(password, user.passwordHash))) {\n          return done(null, false, { message: 'Invalid email or password' });\n        }\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (!user) {\n        return done(null, false);\n      }\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Registration endpoint\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { email, password, role } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      // Hash password and create user\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        email,\n        passwordHash: hashedPassword,\n        role: role || 'user',\n      });\n\n      // Remove password from response\n      const { passwordHash: _, ...userResponse } = user;\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(userResponse);\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    const { passwordHash, ...userResponse } = req.user as SelectUser;\n    res.status(200).json(userResponse);\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  // Get current user\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const { passwordHash, ...userResponse } = req.user as SelectUser;\n    res.json(userResponse);\n  });\n\n  // Create default users on startup\n  createDefaultUsers();\n}\n\n// Authentication middleware\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n}","size_bytes":5500},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { \n  insertUserSchema, \n  insertCategorySchema, \n  insertArticleSchema, \n  insertPermissionSchema,\n  insertFileSchema \n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\n\n// Configure multer for file uploads\nconst upload = multer({ dest: 'uploads/' });\n\n// Admin middleware\nasync function requireAdmin(req: any, res: any, next: any) {\n  try {\n    const userId = req.user.id;\n    const user = await storage.getUser(userId);\n    \n    if (!user || user.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    \n    next();\n  } catch (error) {\n    console.error(\"Error checking admin access:\", error);\n    res.status(500).json({ message: \"Failed to verify admin access\" });\n  }\n}\n\nexport function registerRoutes(app: Express): Server {\n  // Auth setup\n  setupAuth(app);\n\n  // Health check\n  app.get('/api/health', (req, res) => {\n    res.json({ status: 'healthy', timestamp: new Date().toISOString() });\n  });\n\n  // Authentication endpoints\n  app.get('/api/auth/me', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Don't return password\n      const { passwordHash, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User management endpoints (Admin only)\n  app.get('/api/users', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const users = await storage.getUsers();\n      // Remove passwords from response\n      const usersWithoutPasswords = users.map(({ passwordHash, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post('/api/users', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      \n      // Don't return password\n      const { passwordHash, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      }\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.put('/api/users/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const userData = insertUserSchema.partial().parse(req.body);\n      const user = await storage.updateUser(req.params.id, userData);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Don't return password\n      const { passwordHash, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete('/api/users/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const deleted = await storage.deleteUser(req.params.id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Category endpoints\n  app.get('/api/categories', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let categories;\n      if (user.role === 'admin') {\n        categories = await storage.getCategories();\n      } else {\n        categories = await storage.getCategoriesByUser(userId);\n      }\n\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post('/api/categories', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid category data\", errors: error.errors });\n      }\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.put('/api/categories/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const categoryData = insertCategorySchema.partial().parse(req.body);\n      const category = await storage.updateCategory(req.params.id, categoryData);\n      \n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      \n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating category:\", error);\n      res.status(500).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete('/api/categories/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const deleted = await storage.deleteCategory(req.params.id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Article endpoints\n  app.get('/api/articles', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { categoryId, search } = req.query;\n\n      let articles;\n      if (search) {\n        articles = await storage.searchArticles(search as string);\n      } else if (categoryId) {\n        articles = await storage.getArticlesByCategory(categoryId as string);\n      } else {\n        articles = user.role === 'admin' \n          ? await storage.getArticles() \n          : await storage.getPublishedArticles();\n      }\n\n      // Filter articles based on category permissions for non-admin users\n      if (user.role !== 'admin') {\n        const userPermissions = await storage.getUserPermissions(userId);\n        const allowedCategoryIds = userPermissions\n          .filter(p => p.permissionType !== 'none')\n          .map(p => p.categoryId);\n        articles = articles.filter(article => allowedCategoryIds.includes(article.categoryId));\n      }\n\n      res.json(articles);\n    } catch (error) {\n      console.error(\"Error fetching articles:\", error);\n      res.status(500).json({ message: \"Failed to fetch articles\" });\n    }\n  });\n\n  app.get('/api/articles/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const article = await storage.getArticle(req.params.id);\n      if (!article) {\n        return res.status(404).json({ message: \"Article not found\" });\n      }\n\n      // Check permissions for non-admin users\n      if (user.role !== 'admin') {\n        const permission = await storage.getUserCategoryPermission(userId, article.categoryId);\n        if (!permission || permission.permissionType === 'none') {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n\n      res.json(article);\n    } catch (error) {\n      console.error(\"Error fetching article:\", error);\n      res.status(500).json({ message: \"Failed to fetch article\" });\n    }\n  });\n\n  app.post('/api/articles', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check write permissions for the category\n      if (user.role !== 'admin') {\n        const permission = await storage.getUserCategoryPermission(userId, req.body.categoryId);\n        if (!permission || permission.permissionType !== 'write') {\n          return res.status(403).json({ message: \"Write access required\" });\n        }\n      }\n\n      const articleData = insertArticleSchema.parse({\n        ...req.body,\n        authorId: userId,\n      });\n\n      const article = await storage.createArticle(articleData);\n      \n      // Create initial version\n      await storage.createArticleVersion(article.id, userId);\n      \n      res.status(201).json(article);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid article data\", errors: error.errors });\n      }\n      console.error(\"Error creating article:\", error);\n      res.status(500).json({ message: \"Failed to create article\" });\n    }\n  });\n\n  app.put('/api/articles/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const existingArticle = await storage.getArticle(req.params.id);\n      if (!existingArticle) {\n        return res.status(404).json({ message: \"Article not found\" });\n      }\n\n      // Check permissions\n      const canEdit = user.role === 'admin' || \n        existingArticle.authorId === userId ||\n        (await storage.getUserCategoryPermission(userId, existingArticle.categoryId))?.permissionType === 'write';\n\n      if (!canEdit) {\n        return res.status(403).json({ message: \"Edit access denied\" });\n      }\n\n      const articleData = insertArticleSchema.partial().parse(req.body);\n      \n      // Create version if content is being updated\n      if (articleData.content && articleData.content !== existingArticle.content) {\n        await storage.createArticleVersion(req.params.id, userId);\n      }\n      \n      const article = await storage.updateArticle(req.params.id, articleData);\n      res.json(article);\n    } catch (error) {\n      console.error(\"Error updating article:\", error);\n      res.status(500).json({ message: \"Failed to update article\" });\n    }\n  });\n\n  app.delete('/api/articles/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const existingArticle = await storage.getArticle(req.params.id);\n      if (!existingArticle) {\n        return res.status(404).json({ message: \"Article not found\" });\n      }\n\n      // Only admin or author can delete\n      const canDelete = user.role === 'admin' || existingArticle.authorId === userId;\n\n      if (!canDelete) {\n        return res.status(403).json({ message: \"Delete access denied\" });\n      }\n\n      const deleted = await storage.deleteArticle(req.params.id);\n      if (deleted) {\n        res.status(204).send();\n      } else {\n        res.status(404).json({ message: \"Article not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting article:\", error);\n      res.status(500).json({ message: \"Failed to delete article\" });\n    }\n  });\n\n  // Article versions\n  app.get('/api/articles/:id/versions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const article = await storage.getArticle(req.params.id);\n      if (!article) {\n        return res.status(404).json({ message: \"Article not found\" });\n      }\n\n      // Check permissions\n      if (user.role !== 'admin') {\n        const permission = await storage.getUserCategoryPermission(userId, article.categoryId);\n        if (!permission || permission.permissionType === 'none') {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n\n      const versions = await storage.getArticleVersions(req.params.id);\n      res.json(versions);\n    } catch (error) {\n      console.error(\"Error fetching article versions:\", error);\n      res.status(500).json({ message: \"Failed to fetch versions\" });\n    }\n  });\n\n  // Search endpoint\n  app.get('/api/search', isAuthenticated, async (req: any, res) => {\n    try {\n      const { q } = req.query;\n      if (!q) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let articles = await storage.searchArticles(q as string);\n\n      // Filter by permissions for non-admin users\n      if (user.role !== 'admin') {\n        const userPermissions = await storage.getUserPermissions(userId);\n        const allowedCategoryIds = userPermissions\n          .filter(p => p.permissionType !== 'none')\n          .map(p => p.categoryId);\n        articles = articles.filter(article => allowedCategoryIds.includes(article.categoryId));\n      }\n\n      res.json(articles);\n    } catch (error) {\n      console.error(\"Error searching articles:\", error);\n      res.status(500).json({ message: \"Failed to search articles\" });\n    }\n  });\n\n  // Permissions endpoints (Admin only)\n  app.get('/api/permissions', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { userId: targetUserId, categoryId } = req.query;\n\n      let permissions;\n      if (targetUserId) {\n        permissions = await storage.getUserPermissions(targetUserId as string);\n      } else if (categoryId) {\n        permissions = await storage.getCategoryPermissions(categoryId as string);\n      } else {\n        permissions = await storage.getAllPermissions();\n      }\n\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch permissions\" });\n    }\n  });\n\n  app.post('/api/permissions', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const permissionData = insertPermissionSchema.parse(req.body);\n      const permission = await storage.setUserPermission(permissionData);\n      res.status(201).json(permission);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid permission data\", errors: error.errors });\n      }\n      console.error(\"Error creating permission:\", error);\n      res.status(500).json({ message: \"Failed to create permission\" });\n    }\n  });\n\n  app.put('/api/permissions/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const permissionData = insertPermissionSchema.partial().parse(req.body);\n      \n      const updatedPermission = await storage.updatePermission(req.params.id, permissionData);\n      if (updatedPermission) {\n        res.json(updatedPermission);\n      } else {\n        res.status(404).json({ message: \"Permission not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error updating permission:\", error);\n      res.status(500).json({ message: \"Failed to update permission\" });\n    }\n  });\n\n  // File endpoints\n  app.get('/api/files', isAuthenticated, async (req: any, res) => {\n    try {\n      const { categoryId, articleId } = req.query;\n      \n      let files;\n      if (articleId) {\n        files = await storage.getFilesByArticle(articleId as string);\n      } else if (categoryId) {\n        files = await storage.getFilesByCategory(categoryId as string);\n      } else {\n        files = await storage.getFiles();\n      }\n\n      res.json(files);\n    } catch (error) {\n      console.error(\"Error fetching files:\", error);\n      res.status(500).json({ message: \"Failed to fetch files\" });\n    }\n  });\n\n  app.get('/api/files/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const file = await storage.getFile(req.params.id);\n      if (!file) {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n\n      // Check permissions\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (user && user.role !== 'admin' && file.categoryId) {\n        const permission = await storage.getUserCategoryPermission(userId, file.categoryId);\n        if (!permission || permission.permissionType === 'none') {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n\n      res.json(file);\n    } catch (error) {\n      console.error(\"Error fetching file:\", error);\n      res.status(500).json({ message: \"Failed to fetch file\" });\n    }\n  });\n\n  app.post('/api/files/upload', isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const userId = req.user.id;\n      const { articleId, categoryId } = req.body;\n\n      // Check permissions if uploading to a specific category\n      if (categoryId) {\n        const user = await storage.getUser(userId);\n        if (user && user.role !== 'admin') {\n          const permission = await storage.getUserCategoryPermission(userId, categoryId);\n          if (!permission || permission.permissionType === 'none') {\n            return res.status(403).json({ message: \"Upload access denied\" });\n          }\n        }\n      }\n\n      const fileData = {\n        filename: req.file.originalname,\n        originalName: req.file.originalname,\n        filePath: req.file.path,\n        fileType: req.file.mimetype,\n        fileSize: req.file.size,\n        uploadedBy: userId,\n        articleId: articleId || null,\n        categoryId: categoryId || null,\n      };\n\n      const file = await storage.createFile(fileData);\n      res.status(201).json(file);\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      res.status(500).json({ message: \"Failed to upload file\" });\n    }\n  });\n\n  app.delete('/api/files/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const file = await storage.getFile(req.params.id);\n      if (!file) {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      // Check delete permissions\n      const canDelete = user && (\n        user.role === 'admin' || \n        file.uploadedBy === userId ||\n        (file.categoryId && (await storage.getUserCategoryPermission(userId, file.categoryId))?.permissionType === 'write')\n      );\n\n      if (!canDelete) {\n        return res.status(403).json({ message: \"Delete access denied\" });\n      }\n\n      const deleted = await storage.deleteFile(req.params.id);\n      if (deleted) {\n        res.status(204).send();\n      } else {\n        res.status(404).json({ message: \"File not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting file:\", error);\n      res.status(500).json({ message: \"Failed to delete file\" });\n    }\n  });\n\n  // Object storage routes\n  app.get(\"/objects/:objectPath(*)\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user?.claims?.sub;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", isAuthenticated, async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n    res.json({ uploadURL });\n  });\n\n  // Redirect GET requests to /api/login back to the frontend auth page\n  app.get('/api/login', (req, res) => {\n    res.redirect('/auth');\n  });\n\n  // Microsoft Teams Integration endpoints\n  app.post('/api/teams/webhook', async (req, res) => {\n    try {\n      // Handle Teams webhook events\n      const { type, activity, channelData } = req.body;\n      \n      // Log the webhook event for debugging\n      console.log('Teams webhook received:', { type, activity: activity?.type, channelData });\n      \n      // In a real implementation, process different activity types:\n      // - message: new message in Teams\n      // - conversationUpdate: user added/removed from conversation\n      // - invoke: adaptive card action invoked\n      \n      res.status(200).json({ status: 'received' });\n    } catch (error) {\n      console.error(\"Error processing Teams webhook:\", error);\n      res.status(500).json({ message: \"Failed to process webhook\" });\n    }\n  });\n\n  app.get('/api/teams/auth', async (req, res) => {\n    try {\n      // Teams authentication endpoint\n      // In a real implementation, this would handle Teams SSO flow\n      const { code, state } = req.query;\n      \n      if (!code) {\n        return res.status(400).json({ message: \"Authorization code required\" });\n      }\n      \n      // Exchange code for tokens and integrate with Teams\n      // For demo purposes, return mock success\n      res.json({ \n        status: 'authenticated',\n        message: 'Teams integration configured successfully' \n      });\n    } catch (error) {\n      console.error(\"Error with Teams auth:\", error);\n      res.status(500).json({ message: \"Teams authentication failed\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":23032},"server/storage.ts":{"content":"import {\n  users,\n  categories,\n  articles,\n  permissions,\n  files,\n  tags,\n  articleTags,\n  type User,\n  type InsertUser,\n  type Category,\n  type InsertCategory,\n  type Article,\n  type InsertArticle,\n  type Permission,\n  type InsertPermission,\n  type File,\n  type InsertFile,\n  type Tag,\n  type InsertTag,\n  type ArticleTag,\n  type InsertArticleTag,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, ilike, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for custom Auth)\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUsers(): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: number): Promise<boolean>;\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  getCategoriesHierarchy(): Promise<Category[]>;\n  getCategoriesByUser(userId: number): Promise<Category[]>;\n  getCategory(id: number): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: number, category: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: number): Promise<boolean>;\n  \n  // Article operations\n  getArticles(): Promise<Article[]>;\n  getPublishedArticles(): Promise<Article[]>;\n  getArticlesByCategory(categoryId: number): Promise<Article[]>;\n  getArticlesByUser(userId: number): Promise<Article[]>;\n  getArticle(id: number): Promise<Article | undefined>;\n  searchArticles(query: string): Promise<Article[]>;\n  createArticle(article: InsertArticle): Promise<Article>;\n  updateArticle(id: number, article: Partial<InsertArticle>): Promise<Article | undefined>;\n  deleteArticle(id: number): Promise<boolean>;\n  createArticleVersion(articleId: number, userId: number): Promise<void>;\n  getArticleVersions(articleId: number): Promise<any[]>;\n  \n  // Tag operations\n  getTags(): Promise<Tag[]>;\n  getTag(id: number): Promise<Tag | undefined>;\n  createTag(tag: InsertTag): Promise<Tag>;\n  deleteTag(id: number): Promise<boolean>;\n  \n  // Article-tag operations\n  getArticleTags(articleId: number): Promise<Tag[]>;\n  addTagToArticle(articleId: number, tagId: number): Promise<void>;\n  removeTagFromArticle(articleId: number, tagId: number): Promise<void>;\n  \n  // Permission operations\n  getUserPermissions(userId: number): Promise<Permission[]>;\n  getAllPermissions(): Promise<Permission[]>;\n  getCategoryPermissions(categoryId: number): Promise<Permission[]>;\n  getUserCategoryPermission(userId: number, categoryId: number): Promise<Permission | undefined>;\n  setUserPermission(permission: InsertPermission): Promise<Permission>;\n  updatePermission(id: number, permission: Partial<InsertPermission>): Promise<Permission | undefined>;\n  removeUserPermission(userId: number, categoryId: number): Promise<boolean>;\n  \n  // File operations\n  getFiles(): Promise<File[]>;\n  getFilesByArticle(articleId: number): Promise<File[]>;\n  getFilesByCategory(categoryId: number): Promise<File[]>;\n  getFile(id: number): Promise<File | undefined>;\n  createFile(file: InsertFile): Promise<File>;\n  deleteFile(id: number): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(users.createdAt);\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: number, userData: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: number): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(categories.name);\n  }\n\n  async getCategoriesHierarchy(): Promise<Category[]> {\n    // Get all categories and organize them hierarchically\n    const allCategories = await db.select().from(categories).orderBy(categories.name);\n    return allCategories;\n  }\n\n  async getCategoriesByUser(userId: number): Promise<Category[]> {\n    return await db\n      .select({\n        id: categories.id,\n        name: categories.name,\n        description: categories.description,\n        createdBy: categories.createdBy,\n        createdAt: categories.createdAt,\n      })\n      .from(categories)\n      .innerJoin(permissions, eq(categories.id, permissions.categoryId))\n      .where(and(\n        eq(permissions.userId, userId),\n        or(\n          eq(permissions.permissionType, 'read'),\n          eq(permissions.permissionType, 'write'),\n          eq(permissions.permissionType, 'admin')\n        )\n      ))\n      .orderBy(categories.name);\n  }\n\n  async getCategory(id: number): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.id, id));\n    return category;\n  }\n\n  async createCategory(categoryData: InsertCategory): Promise<Category> {\n    const [category] = await db\n      .insert(categories)\n      .values(categoryData)\n      .returning();\n    return category;\n  }\n\n  async updateCategory(id: number, categoryData: Partial<InsertCategory>): Promise<Category | undefined> {\n    const [category] = await db\n      .update(categories)\n      .set(categoryData)\n      .where(eq(categories.id, id))\n      .returning();\n    return category;\n  }\n\n  async deleteCategory(id: number): Promise<boolean> {\n    const result = await db.delete(categories).where(eq(categories.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Article operations\n  async getArticles(): Promise<Article[]> {\n    return await db.select().from(articles).orderBy(desc(articles.createdAt));\n  }\n\n  async getArticlesByCategory(categoryId: number): Promise<Article[]> {\n    return await db\n      .select()\n      .from(articles)\n      .where(eq(articles.categoryId, categoryId))\n      .orderBy(desc(articles.createdAt));\n  }\n\n  async getArticlesByUser(userId: number): Promise<Article[]> {\n    return await db\n      .select()\n      .from(articles)\n      .where(eq(articles.authorId, userId))\n      .orderBy(desc(articles.createdAt));\n  }\n\n  async getArticle(id: number): Promise<Article | undefined> {\n    const [article] = await db.select().from(articles).where(eq(articles.id, id));\n    return article;\n  }\n\n  async searchArticles(query: string): Promise<Article[]> {\n    return await db\n      .select()\n      .from(articles)\n      .where(or(\n        ilike(articles.title, `%${query}%`),\n        ilike(articles.content, `%${query}%`)\n      ))\n      .orderBy(desc(articles.createdAt));\n  }\n\n  async createArticle(articleData: InsertArticle): Promise<Article> {\n    const [article] = await db\n      .insert(articles)\n      .values(articleData)\n      .returning();\n    return article;\n  }\n\n  async updateArticle(id: number, articleData: Partial<InsertArticle>): Promise<Article | undefined> {\n    const [article] = await db\n      .update(articles)\n      .set({ ...articleData, updatedAt: new Date() })\n      .where(eq(articles.id, id))\n      .returning();\n    return article;\n  }\n\n  async deleteArticle(id: number): Promise<boolean> {\n    const result = await db.delete(articles).where(eq(articles.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getPublishedArticles(): Promise<Article[]> {\n    return await db\n      .select()\n      .from(articles)\n      .where(eq(articles.status, 'published'))\n      .orderBy(desc(articles.createdAt));\n  }\n\n  async createArticleVersion(articleId: number, userId: number): Promise<void> {\n    // In a real application, this would create a version snapshot in an article_versions table\n    // For now, we'll just track the update in the articles table with updatedAt\n    await db\n      .update(articles)\n      .set({ \n        updatedAt: new Date(),\n        // Could add a version number field if needed\n      })\n      .where(eq(articles.id, articleId));\n  }\n\n  async getArticleVersions(articleId: number): Promise<any[]> {\n    // In a real application, this would return versions from an article_versions table\n    // For now, we'll return the current article as a single \"version\"\n    const article = await this.getArticle(articleId);\n    if (!article) return [];\n    \n    return [{\n      id: 1,\n      articleId: article.id,\n      version: 1,\n      title: article.title,\n      content: article.content,\n      createdAt: article.updatedAt || article.createdAt,\n      createdBy: article.authorId,\n    }];\n  }\n\n  // Tag operations\n  async getTags(): Promise<Tag[]> {\n    return await db.select().from(tags).orderBy(tags.name);\n  }\n\n  async getTag(id: number): Promise<Tag | undefined> {\n    const [tag] = await db.select().from(tags).where(eq(tags.id, id));\n    return tag;\n  }\n\n  async createTag(tagData: InsertTag): Promise<Tag> {\n    const [tag] = await db\n      .insert(tags)\n      .values(tagData)\n      .returning();\n    return tag;\n  }\n\n  async deleteTag(id: number): Promise<boolean> {\n    const result = await db.delete(tags).where(eq(tags.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Article-tag operations\n  async getArticleTags(articleId: number): Promise<Tag[]> {\n    return await db\n      .select({\n        id: tags.id,\n        name: tags.name,\n        createdAt: tags.createdAt,\n      })\n      .from(tags)\n      .innerJoin(articleTags, eq(tags.id, articleTags.tagId))\n      .where(eq(articleTags.articleId, articleId))\n      .orderBy(tags.name);\n  }\n\n  async addTagToArticle(articleId: number, tagId: number): Promise<void> {\n    await db\n      .insert(articleTags)\n      .values({ articleId, tagId })\n      .onConflictDoNothing();\n  }\n\n  async removeTagFromArticle(articleId: number, tagId: number): Promise<void> {\n    await db\n      .delete(articleTags)\n      .where(and(\n        eq(articleTags.articleId, articleId),\n        eq(articleTags.tagId, tagId)\n      ));\n  }\n\n  // Permission operations\n  async getUserPermissions(userId: number): Promise<Permission[]> {\n    return await db\n      .select()\n      .from(permissions)\n      .where(eq(permissions.userId, userId));\n  }\n\n  async getAllPermissions(): Promise<Permission[]> {\n    return await db.select().from(permissions);\n  }\n\n  async getCategoryPermissions(categoryId: number): Promise<Permission[]> {\n    return await db\n      .select()\n      .from(permissions)\n      .where(eq(permissions.categoryId, categoryId));\n  }\n\n  async getUserCategoryPermission(userId: number, categoryId: number): Promise<Permission | undefined> {\n    const [permission] = await db\n      .select()\n      .from(permissions)\n      .where(and(\n        eq(permissions.userId, userId),\n        eq(permissions.categoryId, categoryId)\n      ));\n    return permission;\n  }\n\n  async setUserPermission(permissionData: InsertPermission): Promise<Permission> {\n    const [permission] = await db\n      .insert(permissions)\n      .values(permissionData)\n      .onConflictDoUpdate({\n        target: [permissions.userId, permissions.categoryId],\n        set: { permissionType: permissionData.permissionType }\n      })\n      .returning();\n    return permission;\n  }\n\n  async updatePermission(id: number, permissionData: Partial<InsertPermission>): Promise<Permission | undefined> {\n    const [permission] = await db\n      .update(permissions)\n      .set(permissionData)\n      .where(eq(permissions.id, id))\n      .returning();\n    return permission;\n  }\n\n  async removeUserPermission(userId: number, categoryId: number): Promise<boolean> {\n    const result = await db\n      .delete(permissions)\n      .where(and(\n        eq(permissions.userId, userId),\n        eq(permissions.categoryId, categoryId)\n      ));\n    return result.rowCount > 0;\n  }\n\n  // File operations\n  async getFiles(): Promise<File[]> {\n    return await db.select().from(files).orderBy(desc(files.uploadedAt));\n  }\n\n  async getFilesByArticle(articleId: number): Promise<File[]> {\n    return await db\n      .select()\n      .from(files)\n      .where(eq(files.articleId, articleId))\n      .orderBy(desc(files.uploadedAt));\n  }\n\n  async getFilesByCategory(categoryId: number): Promise<File[]> {\n    return await db\n      .select()\n      .from(files)\n      .innerJoin(articles, eq(files.articleId, articles.id))\n      .where(eq(articles.categoryId, categoryId))\n      .orderBy(desc(files.uploadedAt));\n  }\n\n  async getFile(id: number): Promise<File | undefined> {\n    const [file] = await db.select().from(files).where(eq(files.id, id));\n    return file;\n  }\n\n  async createFile(fileData: InsertFile): Promise<File> {\n    const [file] = await db\n      .insert(files)\n      .values(fileData)\n      .returning();\n    return file;\n  }\n\n  async deleteFile(id: number): Promise<boolean> {\n    const result = await db.delete(files).where(eq(files.id, id));\n    return result.rowCount > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":13463},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  serial,\n  bigint,\n  integer,\n  primaryKey,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for authentication)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: varchar(\"email\", { length: 255 }).unique().notNull(),\n  passwordHash: varchar(\"password_hash\", { length: 255 }).notNull(),\n  role: varchar(\"role\", { length: 50 }).default('user').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  parentId: integer(\"parent_id\").references(() => categories.id),\n  createdBy: serial(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Articles table\nexport const articles = pgTable(\"articles\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 500 }).notNull(),\n  content: text(\"content\").notNull(),\n  categoryId: serial(\"category_id\").references(() => categories.id),\n  authorId: serial(\"author_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Permissions table  \nexport const permissions = pgTable(\"permissions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: serial(\"user_id\").references(() => users.id),\n  categoryId: serial(\"category_id\").references(() => categories.id),\n  permissionType: varchar(\"permission_type\", { length: 50 }).notNull(), // 'read', 'write', 'admin'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  // Add unique constraint for user_id and category_id combination\n  userCategoryUnique: index(\"user_category_unique\").on(table.userId, table.categoryId),\n}));\n\n// Files table\nexport const files = pgTable(\"files\", {\n  id: serial(\"id\").primaryKey(),\n  filename: varchar(\"filename\", { length: 255 }).notNull(),\n  filePath: varchar(\"file_path\", { length: 500 }).notNull(),\n  fileType: varchar(\"file_type\", { length: 100 }).notNull(),\n  fileSize: bigint(\"file_size\", { mode: 'number' }),\n  uploadedBy: serial(\"uploaded_by\").references(() => users.id),\n  articleId: serial(\"article_id\").references(() => articles.id),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n});\n\n// Tags table\nexport const tags = pgTable(\"tags\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Article-tag relationship table\nexport const articleTags = pgTable(\"article_tags\", {\n  articleId: serial(\"article_id\").references(() => articles.id),\n  tagId: serial(\"tag_id\").references(() => tags.id),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.articleId, table.tagId] }),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  createdCategories: many(categories),\n  articles: many(articles),\n  permissions: many(permissions),\n  files: many(files),\n}));\n\nexport const categoriesRelations = relations(categories, ({ one, many }) => ({\n  parent: one(categories, {\n    fields: [categories.parentId],\n    references: [categories.id],\n  }),\n  children: many(categories),\n  createdBy: one(users, {\n    fields: [categories.createdBy],\n    references: [users.id],\n  }),\n  articles: many(articles),\n  permissions: many(permissions),\n}));\n\nexport const articlesRelations = relations(articles, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [articles.categoryId],\n    references: [categories.id],\n  }),\n  author: one(users, {\n    fields: [articles.authorId],\n    references: [users.id],\n  }),\n  files: many(files),\n  articleTags: many(articleTags),\n}));\n\nexport const permissionsRelations = relations(permissions, ({ one }) => ({\n  user: one(users, {\n    fields: [permissions.userId],\n    references: [users.id],\n  }),\n  category: one(categories, {\n    fields: [permissions.categoryId],\n    references: [categories.id],\n  }),\n}));\n\nexport const filesRelations = relations(files, ({ one }) => ({\n  uploadedBy: one(users, {\n    fields: [files.uploadedBy],\n    references: [users.id],\n  }),\n  article: one(articles, {\n    fields: [files.articleId],\n    references: [articles.id],\n  }),\n}));\n\nexport const tagsRelations = relations(tags, ({ many }) => ({\n  articleTags: many(articleTags),\n}));\n\nexport const articleTagsRelations = relations(articleTags, ({ one }) => ({\n  article: one(articles, {\n    fields: [articleTags.articleId],\n    references: [articles.id],\n  }),\n  tag: one(tags, {\n    fields: [articleTags.tagId],\n    references: [tags.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const loginUserSchema = z.object({\n  email: z.string().email(\"Invalid email format\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const registerUserSchema = insertUserSchema.extend({\n  email: z.string().email(\"Invalid email format\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertArticleSchema = createInsertSchema(articles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFileSchema = createInsertSchema(files).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertTagSchema = createInsertSchema(tags).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertArticleTagSchema = createInsertSchema(articleTags);\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertArticle = z.infer<typeof insertArticleSchema>;\nexport type Article = typeof articles.$inferSelect;\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\nexport type Permission = typeof permissions.$inferSelect;\nexport type InsertFile = z.infer<typeof insertFileSchema>;\nexport type File = typeof files.$inferSelect;\nexport type InsertTag = z.infer<typeof insertTagSchema>;\nexport type Tag = typeof tags.$inferSelect;\nexport type InsertArticleTag = z.infer<typeof insertArticleTagSchema>;\nexport type ArticleTag = typeof articleTags.$inferSelect;\n","size_bytes":7193},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth, AuthProvider } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Articles from \"@/pages/articles\";\nimport ArticleEditor from \"@/pages/article-editor\";\nimport Categories from \"@/pages/categories\";\nimport FileLibrary from \"@/pages/file-library\";\nimport UserManagement from \"@/pages/user-management\";\nimport Profile from \"@/pages/profile\";\nimport AuthPage from \"@/pages/auth-page\";\nimport Permissions from \"@/pages/permissions\";\nimport SystemSettings from \"@/pages/system-settings\";\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!user ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/auth\" component={AuthPage} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/articles\" component={Articles} />\n          <Route path=\"/articles/new\" component={ArticleEditor} />\n          <Route path=\"/articles/:id/edit\" component={ArticleEditor} />\n          <Route path=\"/categories\" component={Categories} />\n          <Route path=\"/files\" component={FileLibrary} />\n          <Route path=\"/users\" component={UserManagement} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/permissions\" component={Permissions} />\n          <Route path=\"/system-settings\" component={SystemSettings} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2304},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(208.7097 79.1045% 35.2941%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 26.2745%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(45.0000 92.8571% 50.5882%);\n  --accent-foreground: hsl(210 25% 7.8431%);\n  --success: hsl(122.4390 39.4737% 49.2157%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(35.5556 91.0448% 62.3529%);\n  --warning-foreground: hsl(210 25% 7.8431%);\n  --error: hsl(4.2105 89.6226% 58.4314%);\n  --error-foreground: hsl(0 0% 100%);\n  --destructive: hsl(4.2105 89.6226% 58.4314%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(208.7097 79.1045% 35.2941%);\n  --chart-2: hsl(122.4390 39.4737% 49.2157%);\n  --chart-3: hsl(45.0000 92.8571% 50.5882%);\n  --chart-4: hsl(35.5556 91.0448% 62.3529%);\n  --chart-5: hsl(4.2105 89.6226% 58.4314%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(208.7097 79.1045% 35.2941%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(208.7097 79.1045% 35.2941%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -2px hsl(0 0% 0% / 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -4px hsl(0 0% 0% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 8px 10px -6px hsl(0 0% 0% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(208.7097 79.1045% 35.2941%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(45.0000 92.8571% 50.5882%);\n  --accent-foreground: hsl(210 25% 7.8431%);\n  --success: hsl(122.4390 39.4737% 49.2157%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(35.5556 91.0448% 62.3529%);\n  --warning-foreground: hsl(210 25% 7.8431%);\n  --error: hsl(4.2105 89.6226% 58.4314%);\n  --error-foreground: hsl(0 0% 100%);\n  --destructive: hsl(4.2105 89.6226% 58.4314%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(208.7097 79.1045% 35.2941%);\n  --chart-2: hsl(122.4390 39.4737% 49.2157%);\n  --chart-3: hsl(45.0000 92.8571% 50.5882%);\n  --chart-4: hsl(35.5556 91.0448% 62.3529%);\n  --chart-5: hsl(4.2105 89.6226% 58.4314%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.2), 0px 1px 2px -1px hsl(0 0% 0% / 0.2);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.2), 0px 1px 2px -1px hsl(0 0% 0% / 0.2);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.2), 0px 2px 4px -2px hsl(0 0% 0% / 0.2);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.2), 0px 4px 6px -4px hsl(0 0% 0% / 0.2);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.2), 0px 8px 10px -6px hsl(0 0% 0% / 0.2);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.4);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n/* Custom scrollbar styles */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground) / 0.3);\n}\n\n/* Uppy styles customization */\n.uppy-Dashboard-inner {\n  background-color: hsl(var(--card)) !important;\n  border-color: hsl(var(--border)) !important;\n}\n\n.uppy-Dashboard-AddFiles-title {\n  color: hsl(var(--foreground)) !important;\n}\n\n.uppy-Dashboard-browse {\n  color: hsl(var(--primary)) !important;\n}\n\n.uppy-Dashboard-browse:hover {\n  color: hsl(var(--primary) / 0.8) !important;\n}\n\n.uppy-Dashboard-AddFiles-info {\n  color: hsl(var(--muted-foreground)) !important;\n}\n","size_bytes":6094},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2867},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User as SelectUser, LoginUser, RegisterUser } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginUser>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, RegisterUser>;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }): React.JSX.Element {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginUser) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: `Hello ${user.email}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Account created!\",\n        description: `Welcome ${user.email}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"See you next time!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return {\n    ...context,\n    isAuthenticated: !!context.user,\n  };\n}","size_bytes":3097},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/article-editor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation, useParams } from \"wouter\";\nimport Navbar from \"@/components/layout/navbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport RichTextEditor from \"@/components/ui/rich-text-editor\";\nimport FileUploadZone from \"@/components/ui/file-upload-zone\";\n\nexport default function ArticleEditor() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const { id } = useParams();\n  const isEditing = Boolean(id);\n\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [categoryId, setCategoryId] = useState(\"\");\n  const [tags, setTags] = useState(\"\");\n  const [isPublished, setIsPublished] = useState(false);\n\n  const { data: article, isLoading: articleLoading } = useQuery({\n    queryKey: [\"/api/articles\", id],\n    enabled: isEditing,\n    retry: false,\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  // Load article data when editing\n  useEffect(() => {\n    if (article) {\n      setTitle(article.title || \"\");\n      setContent(article.content || \"\");\n      setCategoryId(article.categoryId || \"\");\n      setTags(article.tags?.join(\", \") || \"\");\n      setIsPublished(article.isPublished || false);\n    }\n  }, [article]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/articles\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Article created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/articles\"] });\n      setLocation('/articles');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create article\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PUT\", `/api/articles/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Article updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/articles\"] });\n      setLocation('/articles');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update article\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = (publish = false) => {\n    if (!title.trim() || !content.trim() || !categoryId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const articleData = {\n      title: title.trim(),\n      content: content.trim(),\n      categoryId,\n      tags: tags ? tags.split(\",\").map(tag => tag.trim()).filter(Boolean) : [],\n      isPublished: publish || isPublished,\n    };\n\n    if (isEditing) {\n      updateMutation.mutate(articleData);\n    } else {\n      createMutation.mutate(articleData);\n    }\n  };\n\n  const handleFileUpload = (files: any[]) => {\n    // Handle file uploads and attach to article\n    console.log(\"Files uploaded:\", files);\n  };\n\n  if (isEditing && articleLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading article...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"pt-16\">\n        <main className=\"max-w-4xl mx-auto p-6\">\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  {isEditing ? 'Edit Article' : 'Create New Article'}\n                </h1>\n                <p className=\"text-gray-600\">Write and publish knowledge base content</p>\n              </div>\n              <div className=\"flex space-x-3\">\n                <Button \n                  variant=\"outline\"\n                  onClick={() => handleSave(false)}\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                >\n                  Save Draft\n                </Button>\n                <Button \n                  onClick={() => handleSave(true)}\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                >\n                  {isEditing ? 'Update Article' : 'Publish Article'}\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-6 space-y-6\">\n              {/* Article Title */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Article Title *\n                </label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter article title...\"\n                  className=\"text-lg\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                />\n              </div>\n\n              {/* Category and Tags */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Category *\n                  </label>\n                  <Select value={categoryId} onValueChange={setCategoryId}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map((category: any) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Tags\n                  </label>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Enter tags separated by commas...\"\n                    value={tags}\n                    onChange={(e) => setTags(e.target.value)}\n                  />\n                </div>\n              </div>\n\n              {/* Rich Text Editor */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Content *\n                </label>\n                <RichTextEditor\n                  value={content}\n                  onChange={setContent}\n                  placeholder=\"Start writing your article content here...\"\n                />\n              </div>\n\n              {/* File Attachments */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Attachments\n                </label>\n                <FileUploadZone onFilesUploaded={handleFileUpload} />\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7898},"client/src/pages/articles.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Search, Filter } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Articles() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: articles = [], isLoading } = useQuery({\n    queryKey: [\"/api/articles\", searchQuery ? `?search=${searchQuery}` : \"\"],\n    retry: false,\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const filteredArticles = articles.filter((article: any) =>\n    article.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    article.content.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const getCategoryName = (categoryId: string) => {\n    const category = categories.find((cat: any) => cat.id === categoryId);\n    return category?.name || 'Unknown';\n  };\n\n  const getCategoryColor = (categoryId: string) => {\n    const category = categories.find((cat: any) => cat.id === categoryId);\n    return category?.color || '#1976D2';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Articles</h1>\n                  <p className=\"text-gray-600\">Manage your knowledge base content</p>\n                </div>\n                <Button onClick={() => setLocation('/articles/new')}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  New Article\n                </Button>\n              </div>\n            </div>\n\n            {/* Search and Filters */}\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex flex-wrap items-center gap-4\">\n                  <div className=\"flex-1 min-w-64\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Search articles...\"\n                        className=\"pl-10\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                      />\n                    </div>\n                  </div>\n                  <Button variant=\"outline\">\n                    <Filter className=\"mr-2 h-4 w-4\" />\n                    Filter\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Articles List */}\n            {isLoading ? (\n              <div className=\"grid gap-6\">\n                {[1, 2, 3].map((i) => (\n                  <Card key={i}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"animate-pulse\">\n                        <div className=\"h-6 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-4\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-full mb-2\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : filteredArticles.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <p className=\"text-gray-500 mb-4\">No articles found</p>\n                  <Button onClick={() => setLocation('/articles/new')}>\n                    Create your first article\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-6\">\n                {filteredArticles.map((article: any) => (\n                  <Card key={article.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <h3 \n                              className=\"text-lg font-semibold text-gray-900 hover:text-primary cursor-pointer\"\n                              onClick={() => setLocation(`/articles/${article.id}/edit`)}\n                            >\n                              {article.title}\n                            </h3>\n                            {!article.isPublished && (\n                              <Badge variant=\"secondary\">Draft</Badge>\n                            )}\n                          </div>\n                          <p className=\"text-gray-600 mb-3 line-clamp-2\">\n                            {article.content.replace(/<[^>]*>/g, '').substring(0, 150)}...\n                          </p>\n                          <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                            <Badge \n                              variant=\"outline\" \n                              style={{ \n                                borderColor: getCategoryColor(article.categoryId),\n                                color: getCategoryColor(article.categoryId)\n                              }}\n                            >\n                              {getCategoryName(article.categoryId)}\n                            </Badge>\n                            <span>Version {article.version}</span>\n                            <span>{new Date(article.createdAt).toLocaleDateString()}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setLocation(`/articles/${article.id}/edit`)}\n                          >\n                            Edit\n                          </Button>\n                          {(user?.role === 'admin' || article.authorId === user?.id) && (\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-red-600 hover:text-red-700\">\n                              Delete\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7264},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginUserSchema, registerUserSchema, type LoginUser, type RegisterUser } from \"@shared/schema\";\nimport { BookOpen, Users, FileText, Shield } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { user, isLoading, loginMutation, registerMutation } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  // Redirect to dashboard if already authenticated\n  if (!isLoading && user) {\n    setLocation('/');\n    return null;\n  }\n\n  const loginForm = useForm<LoginUser>({\n    resolver: zodResolver(loginUserSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterUser>({\n    resolver: zodResolver(registerUserSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      role: \"user\",\n    },\n  });\n\n  const onLogin = (data: LoginUser) => {\n    loginMutation.mutate(data, {\n      onSuccess: () => {\n        setLocation('/');\n      },\n    });\n  };\n\n  const onRegister = (data: RegisterUser) => {\n    registerMutation.mutate(data, {\n      onSuccess: () => {\n        setLocation('/');\n      },\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-6xl grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\n        \n        {/* Hero Section */}\n        <div className=\"space-y-6 text-center lg:text-left\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold tracking-tight text-gray-900 dark:text-white\">\n              Knowledge Base Platform\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              Organize, share, and collaborate on your team's knowledge with our comprehensive platform.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4 max-w-md mx-auto lg:mx-0\">\n            <div className=\"flex items-center space-x-3 p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm\">\n              <BookOpen className=\"h-6 w-6 text-blue-600\" />\n              <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Rich Articles</span>\n            </div>\n            <div className=\"flex items-center space-x-3 p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm\">\n              <Users className=\"h-6 w-6 text-green-600\" />\n              <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Team Collaboration</span>\n            </div>\n            <div className=\"flex items-center space-x-3 p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm\">\n              <FileText className=\"h-6 w-6 text-purple-600\" />\n              <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">File Management</span>\n            </div>\n            <div className=\"flex items-center space-x-3 p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm\">\n              <Shield className=\"h-6 w-6 text-red-600\" />\n              <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Access Control</span>\n            </div>\n          </div>\n\n          <div className=\"bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n            <h3 className=\"text-sm font-semibold text-blue-900 dark:text-blue-100 mb-2\">Demo Accounts</h3>\n            <div className=\"space-y-1 text-sm text-blue-800 dark:text-blue-200\">\n              <div><span className=\"font-medium\">Admin:</span> admin@example.com / admin123</div>\n              <div><span className=\"font-medium\">User:</span> user@example.com / user123</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Auth Form */}\n        <Card className=\"w-full max-w-md mx-auto lg:mx-0\">\n          <CardHeader>\n            <CardTitle>Welcome</CardTitle>\n            <CardDescription>\n              Sign in to your account or create a new one to get started.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                    <FormField\n                      control={loginForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"Enter your email\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={loginForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Enter your password\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={loginMutation.isPending}\n                    >\n                      {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n              \n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <Form {...registerForm}>\n                  <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                    <FormField\n                      control={registerForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"Enter your email\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={registerForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Create a password\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={registerMutation.isPending}\n                    >\n                      {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8688},"client/src/pages/categories.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, FolderOpen } from \"lucide-react\";\n\nexport default function Categories() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    color: \"#1976D2\",\n  });\n\n  const { data: categories = [], isLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/categories\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Category created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setShowCreateDialog(false);\n      resetForm();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PUT\", `/api/categories/${editingCategory.id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Category updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setEditingCategory(null);\n      resetForm();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/categories/${id}`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Category deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      color: \"#1976D2\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Category name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingCategory) {\n      updateMutation.mutate(formData);\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const startEdit = (category: any) => {\n    setEditingCategory(category);\n    setFormData({\n      name: category.name,\n      description: category.description || \"\",\n      color: category.color || \"#1976D2\",\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Are you sure you want to delete this category?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Categories</h1>\n                  <p className=\"text-gray-600\">Organize your knowledge base content</p>\n                </div>\n                {user?.role === 'admin' && (\n                  <Dialog open={showCreateDialog || !!editingCategory} onOpenChange={(open) => {\n                    if (!open) {\n                      setShowCreateDialog(false);\n                      setEditingCategory(null);\n                      resetForm();\n                    }\n                  }}>\n                    <DialogTrigger asChild>\n                      <Button onClick={() => setShowCreateDialog(true)}>\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        New Category\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>\n                          {editingCategory ? 'Edit Category' : 'Create New Category'}\n                        </DialogTitle>\n                      </DialogHeader>\n                      <form onSubmit={handleSubmit} className=\"space-y-4\">\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Name *\n                          </label>\n                          <Input\n                            value={formData.name}\n                            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                            placeholder=\"Enter category name\"\n                            required\n                          />\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Description\n                          </label>\n                          <Input\n                            value={formData.description}\n                            onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                            placeholder=\"Enter category description\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Color\n                          </label>\n                          <input\n                            type=\"color\"\n                            value={formData.color}\n                            onChange={(e) => setFormData({ ...formData, color: e.target.value })}\n                            className=\"h-10 w-20 rounded border border-gray-300\"\n                          />\n                        </div>\n                        <div className=\"flex justify-end space-x-3 pt-4\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              setShowCreateDialog(false);\n                              setEditingCategory(null);\n                              resetForm();\n                            }}\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            type=\"submit\"\n                            disabled={createMutation.isPending || updateMutation.isPending}\n                          >\n                            {editingCategory ? 'Update' : 'Create'}\n                          </Button>\n                        </div>\n                      </form>\n                    </DialogContent>\n                  </Dialog>\n                )}\n              </div>\n            </div>\n\n            {/* Categories Grid */}\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[1, 2, 3].map((i) => (\n                  <Card key={i}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"animate-pulse\">\n                        <div className=\"h-6 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-full mb-4\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : categories.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <FolderOpen className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500 mb-4\">No categories found</p>\n                  {user?.role === 'admin' && (\n                    <Button onClick={() => setShowCreateDialog(true)}>\n                      Create your first category\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {categories.map((category: any) => (\n                  <Card key={category.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div \n                          className=\"w-4 h-4 rounded-full\"\n                          style={{ backgroundColor: category.color }}\n                        />\n                        {user?.role === 'admin' && (\n                          <div className=\"flex space-x-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => startEdit(category)}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(category.id)}\n                              className=\"text-red-600 hover:text-red-700\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                        {category.name}\n                      </h3>\n                      {category.description && (\n                        <p className=\"text-gray-600 text-sm mb-3\">\n                          {category.description}\n                        </p>\n                      )}\n                      <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <span>Created {new Date(category.createdAt).toLocaleDateString()}</span>\n                        <Badge variant=\"outline\">0 articles</Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11574},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BookOpen, FolderOpen, Users, Upload, Plus, FolderPlus, UserCog } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/stats\"],\n    retry: false,\n  });\n\n  const { data: articles, isLoading: articlesLoading } = useQuery({\n    queryKey: [\"/api/articles\"],\n    retry: false,\n  });\n\n  // Redirect to auth page if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation('/auth');\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast, setLocation]);\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const recentArticles = articles?.slice(0, 3) || [];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard</h1>\n              <p className=\"text-gray-600\">Welcome back! Here's what's happening in your knowledge base.</p>\n            </div>\n\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                        <BookOpen className=\"text-white h-6 w-6\" />\n                      </div>\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600\">Total Articles</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">\n                        {statsLoading ? \"...\" : stats?.totalArticles || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-12 h-12 bg-success rounded-lg flex items-center justify-center\">\n                        <FolderOpen className=\"text-white h-6 w-6\" />\n                      </div>\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600\">Categories</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">\n                        {statsLoading ? \"...\" : stats?.totalCategories || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center\">\n                        <Users className=\"text-white h-6 w-6\" />\n                      </div>\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600\">Active Users</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">\n                        {statsLoading ? \"...\" : stats?.activeUsers || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-12 h-12 bg-warning rounded-lg flex items-center justify-center\">\n                        <Upload className=\"text-white h-6 w-6\" />\n                      </div>\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600\">Uploaded Files</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">\n                        {statsLoading ? \"...\" : stats?.totalFiles || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activity and Quick Actions */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              \n              {/* Recent Articles */}\n              <Card>\n                <div className=\"p-6 border-b border-gray-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <h2 className=\"text-lg font-semibold text-gray-900\">Recent Articles</h2>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => setLocation('/articles')}\n                    >\n                      View All\n                    </Button>\n                  </div>\n                </div>\n                <CardContent className=\"p-6\">\n                  {articlesLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3].map((i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : recentArticles.length === 0 ? (\n                    <p className=\"text-gray-500 text-center py-4\">No articles found</p>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {recentArticles.map((article: any) => (\n                        <div key={article.id} className=\"flex items-start space-x-3\">\n                          <div className=\"w-2 h-2 bg-primary rounded-full mt-2\"></div>\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"text-sm font-medium text-gray-900 truncate\">\n                              {article.title}\n                            </p>\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\">\n                                Category\n                              </span>\n                              <span className=\"text-xs text-gray-500\">\n                                {new Date(article.createdAt).toLocaleDateString()}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Quick Actions */}\n              <Card>\n                <div className=\"p-6 border-b border-gray-200\">\n                  <h2 className=\"text-lg font-semibold text-gray-900\">Quick Actions</h2>\n                </div>\n                <CardContent className=\"p-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"flex flex-col items-center p-4 h-auto border-2 border-dashed border-gray-300 hover:border-primary hover:bg-blue-50\"\n                      onClick={() => setLocation('/articles/new')}\n                    >\n                      <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mb-2\">\n                        <Plus className=\"text-white h-6 w-6\" />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900\">New Article</span>\n                    </Button>\n                    \n                    <Button\n                      variant=\"outline\"\n                      className=\"flex flex-col items-center p-4 h-auto border-2 border-dashed border-gray-300 hover:border-success hover:bg-green-50\"\n                      onClick={() => setLocation('/files')}\n                    >\n                      <div className=\"w-12 h-12 bg-success rounded-lg flex items-center justify-center mb-2\">\n                        <Upload className=\"text-white h-6 w-6\" />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900\">Upload File</span>\n                    </Button>\n                    \n                    <Button\n                      variant=\"outline\"\n                      className=\"flex flex-col items-center p-4 h-auto border-2 border-dashed border-gray-300 hover:border-accent hover:bg-yellow-50\"\n                      onClick={() => setLocation('/categories')}\n                    >\n                      <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center mb-2\">\n                        <FolderPlus className=\"text-white h-6 w-6\" />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900\">New Category</span>\n                    </Button>\n                    \n                    {user.role === 'admin' && (\n                      <Button\n                        variant=\"outline\"\n                        className=\"flex flex-col items-center p-4 h-auto border-2 border-dashed border-gray-300 hover:border-purple-500 hover:bg-purple-50\"\n                        onClick={() => setLocation('/users')}\n                      >\n                        <div className=\"w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center mb-2\">\n                          <UserCog className=\"text-white h-6 w-6\" />\n                        </div>\n                        <span className=\"text-sm font-medium text-gray-900\">Manage Users</span>\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11483},"client/src/pages/file-library.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport FileUploadZone from \"@/components/ui/file-upload-zone\";\nimport { \n  Upload, \n  Search, \n  FileText, \n  Image, \n  File, \n  Video, \n  MoreVertical,\n  Trash2,\n  Download \n} from \"lucide-react\";\n\nexport default function FileLibrary() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [showUploadDialog, setShowUploadDialog] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [fileTypeFilter, setFileTypeFilter] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\n\n  const { data: files = [], isLoading } = useQuery({\n    queryKey: [\"/api/files\"],\n    retry: false,\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/files/${id}`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"File deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getFileIcon = (fileType: string) => {\n    if (fileType.startsWith('image/')) return Image;\n    if (fileType.startsWith('video/')) return Video;\n    if (fileType.includes('pdf')) return FileText;\n    return File;\n  };\n\n  const getFileTypeColor = (fileType: string) => {\n    if (fileType.startsWith('image/')) return 'bg-purple-100 text-purple-600';\n    if (fileType.startsWith('video/')) return 'bg-blue-100 text-blue-600';\n    if (fileType.includes('pdf')) return 'bg-red-100 text-red-600';\n    if (fileType.includes('document') || fileType.includes('word')) return 'bg-blue-100 text-blue-600';\n    if (fileType.includes('spreadsheet') || fileType.includes('excel')) return 'bg-green-100 text-green-600';\n    return 'bg-gray-100 text-gray-600';\n  };\n\n  const formatFileSize = (bytes: number) => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 Byte';\n    const i = parseInt(String(Math.floor(Math.log(bytes) / Math.log(1024))));\n    return Math.round((bytes / Math.pow(1024, i)) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  const filteredFiles = files.filter((file: any) => {\n    const matchesSearch = file.originalName.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesFileType = !fileTypeFilter || file.fileType.includes(fileTypeFilter);\n    const matchesCategory = !categoryFilter || file.categoryId === categoryFilter;\n    return matchesSearch && matchesFileType && matchesCategory;\n  });\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Are you sure you want to delete this file?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleDownload = (file: any) => {\n    // Open file in new tab for download/viewing\n    window.open(file.filePath, '_blank');\n  };\n\n  const handleFilesUploaded = (uploadedFiles: any[]) => {\n    setShowUploadDialog(false);\n    queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n    toast({\n      title: \"Success\",\n      description: `${uploadedFiles.length} file(s) uploaded successfully`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">File Library</h1>\n                  <p className=\"text-gray-600\">Manage uploaded documents and media files</p>\n                </div>\n                <Dialog open={showUploadDialog} onOpenChange={setShowUploadDialog}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Upload className=\"mr-2 h-4 w-4\" />\n                      Upload Files\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>Upload Files</DialogTitle>\n                    </DialogHeader>\n                    <FileUploadZone onFilesUploaded={handleFilesUploaded} />\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n\n            {/* Filter and Search */}\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex flex-wrap items-center gap-4\">\n                  <div className=\"flex-1 min-w-64\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Search files...\"\n                        className=\"pl-10\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                      />\n                    </div>\n                  </div>\n                  <Select value={fileTypeFilter} onValueChange={setFileTypeFilter}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue placeholder=\"All File Types\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">All File Types</SelectItem>\n                      <SelectItem value=\"pdf\">PDF Documents</SelectItem>\n                      <SelectItem value=\"document\">Word Documents</SelectItem>\n                      <SelectItem value=\"image\">Images</SelectItem>\n                      <SelectItem value=\"video\">Videos</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue placeholder=\"All Categories\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">All Categories</SelectItem>\n                      {categories.map((category: any) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Files Grid */}\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {[1, 2, 3, 4, 5, 6].map((i) => (\n                  <Card key={i}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"animate-pulse\">\n                        <div className=\"h-10 bg-gray-200 rounded mb-3\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : filteredFiles.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500 mb-4\">No files found</p>\n                  <Button onClick={() => setShowUploadDialog(true)}>\n                    Upload your first file\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {filteredFiles.map((file: any) => {\n                  const FileIcon = getFileIcon(file.fileType);\n                  const category = categories.find((cat: any) => cat.id === file.categoryId);\n                  \n                  return (\n                    <Card key={file.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${getFileTypeColor(file.fileType)}`}>\n                            <FileIcon className=\"h-5 w-5\" />\n                          </div>\n                          <div className=\"relative\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"p-1\"\n                            >\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                            {/* File actions menu would go here */}\n                          </div>\n                        </div>\n                        <h3 className=\"text-sm font-medium text-gray-900 truncate mb-1\">\n                          {file.originalName}\n                        </h3>\n                        <p className=\"text-xs text-gray-500 mb-2\">\n                          {formatFileSize(file.fileSize)}\n                        </p>\n                        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                          <span>{new Date(file.uploadedAt).toLocaleDateString()}</span>\n                          {category && (\n                            <Badge \n                              variant=\"outline\"\n                              style={{ \n                                borderColor: category.color,\n                                color: category.color \n                              }}\n                            >\n                              {category.name}\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        {/* File actions */}\n                        <div className=\"flex mt-3 space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1\"\n                            onClick={() => handleDownload(file)}\n                          >\n                            <Download className=\"h-3 w-3 mr-1\" />\n                            View\n                          </Button>\n                          {(user?.role === 'admin' || file.uploadedBy === user?.id) && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(file.id)}\n                              className=\"text-red-600 hover:text-red-700\"\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12253},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BookOpen } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary to-blue-600\">\n      <div className=\"max-w-md w-full mx-4\">\n        <Card className=\"shadow-xl\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center mb-8\">\n              <div className=\"w-16 h-16 bg-primary rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                <BookOpen className=\"text-white h-8 w-8\" />\n              </div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Knowledge Base</h1>\n              <p className=\"text-gray-600 mt-2\">Enterprise Knowledge Management</p>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <Button \n                className=\"w-full\"\n                onClick={() => setLocation('/auth')}\n              >\n                Sign In to Continue\n              </Button>\n            </div>\n            \n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600\">\n                Access your team's knowledge base with secure authentication\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1492},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/permissions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Shield, UserPlus, Edit, Trash2 } from \"lucide-react\";\n\nexport default function Permissions() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingPermission, setEditingPermission] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    userId: \"\",\n    categoryId: \"\",\n    permissionType: \"read\" as \"read\" | \"write\" | \"none\",\n  });\n\n  // Redirect to auth page if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation('/auth');\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast, setLocation]);\n\n  // Check admin access\n  useEffect(() => {\n    if (!isLoading && user && user.role !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required for this page\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation('/');\n      }, 500);\n    }\n  }, [user, isLoading, toast, setLocation]);\n\n  const { data: permissions = [], isLoading: permissionsLoading } = useQuery({\n    queryKey: [\"/api/permissions\"],\n    retry: false,\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n    retry: false,\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const createPermissionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/permissions\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Permission created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/permissions\"] });\n      setShowDialog(false);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePermissionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const { id, ...updateData } = data;\n      return await apiRequest(\"PUT\", `/api/permissions/${id}`, updateData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Permission updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/permissions\"] });\n      setShowDialog(false);\n      setEditingPermission(null);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePermissionMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/permissions/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Permission deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/permissions\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      userId: \"\",\n      categoryId: \"\",\n      permissionType: \"read\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingPermission) {\n      updatePermissionMutation.mutate({ ...formData, id: editingPermission.id });\n    } else {\n      createPermissionMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (permission: any) => {\n    setEditingPermission(permission);\n    setFormData({\n      userId: permission.userId.toString(),\n      categoryId: permission.categoryId.toString(),\n      permissionType: permission.permissionType,\n    });\n    setShowDialog(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this permission?\")) {\n      deletePermissionMutation.mutate(id);\n    }\n  };\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Permissions Management</h1>\n                <p className=\"text-gray-600\">Manage user permissions for categories and content access.</p>\n              </div>\n              <Dialog open={showDialog} onOpenChange={setShowDialog}>\n                <DialogTrigger asChild>\n                  <Button onClick={() => { resetForm(); setEditingPermission(null); }}>\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    Add Permission\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editingPermission ? \"Edit Permission\" : \"Add New Permission\"}\n                    </DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleSubmit} className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">User</label>\n                      <Select value={formData.userId} onValueChange={(value) => setFormData({...formData, userId: value})}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select user\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {users.map((user: any) => (\n                            <SelectItem key={user.id} value={user.id.toString()}>\n                              {user.email}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Category</label>\n                      <Select value={formData.categoryId} onValueChange={(value) => setFormData({...formData, categoryId: value})}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {categories.map((category: any) => (\n                            <SelectItem key={category.id} value={category.id.toString()}>\n                              {category.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Permission Type</label>\n                      <Select value={formData.permissionType} onValueChange={(value: \"read\" | \"write\" | \"none\") => setFormData({...formData, permissionType: value})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"read\">Read</SelectItem>\n                          <SelectItem value=\"write\">Write</SelectItem>\n                          <SelectItem value=\"none\">None</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setShowDialog(false)}>\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={createPermissionMutation.isPending || updatePermissionMutation.isPending}>\n                        {editingPermission ? \"Update\" : \"Create\"}\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Current Permissions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {permissionsLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                    <p className=\"mt-2 text-gray-600\">Loading permissions...</p>\n                  </div>\n                ) : permissions.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Shield className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No permissions found</h3>\n                    <p className=\"text-gray-600\">Get started by adding your first permission.</p>\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>User</TableHead>\n                        <TableHead>Category</TableHead>\n                        <TableHead>Permission</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {permissions.map((permission: any) => (\n                        <TableRow key={permission.id}>\n                          <TableCell>\n                            {users.find((u: any) => u.id === permission.userId)?.email || 'Unknown User'}\n                          </TableCell>\n                          <TableCell>\n                            {categories.find((c: any) => c.id === permission.categoryId)?.name || 'Unknown Category'}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={permission.permissionType === 'write' ? 'default' : permission.permissionType === 'read' ? 'secondary' : 'destructive'}>\n                              {permission.permissionType}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleEdit(permission)}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleDelete(permission.id)}\n                                disabled={deletePermissionMutation.isPending}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":13006},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { User, Mail, Calendar, Shield, Key, Save } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [isEditing, setIsEditing] = useState(false);\n  const [showPasswordForm, setShowPasswordForm] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n\n  // Redirect to auth page if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation('/auth');\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast, setLocation]);\n\n  // Load user data\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        email: user.email || \"\",\n      });\n    }\n  }, [user]);\n\n  const handleProfileUpdate = (e: React.FormEvent) => {\n    e.preventDefault();\n    // In a real application, this would make an API call to update the profile\n    toast({\n      title: \"Success\",\n      description: \"Profile updated successfully (demo mode)\",\n    });\n    setIsEditing(false);\n  };\n\n  const handlePasswordChange = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"New passwords don't match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (passwordData.newPassword.length < 8) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 8 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // In a real application, this would make an API call to change the password\n    toast({\n      title: \"Success\",\n      description: \"Password changed successfully (demo mode)\",\n    });\n    setShowPasswordForm(false);\n    setPasswordData({\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    });\n  };\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"max-w-4xl mx-auto p-6\">\n            <div className=\"mb-6\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">Profile Settings</h1>\n              <p className=\"text-gray-600\">Manage your account settings and preferences</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              \n              {/* Profile Overview */}\n              <div className=\"lg:col-span-1\">\n                <Card>\n                  <CardContent className=\"p-6 text-center\">\n                    <Avatar className=\"h-24 w-24 mx-auto mb-4\">\n                      <AvatarImage src={user.profileImageUrl || \"\"} alt={user.firstName || \"User\"} />\n                      <AvatarFallback className=\"text-2xl\">\n                        {user.firstName?.charAt(0) || user.email?.charAt(0) || \"U\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    <h2 className=\"text-xl font-semibold text-gray-900 mb-1\">\n                      {user.firstName && user.lastName \n                        ? `${user.firstName} ${user.lastName}` \n                        : user.email || \"User\"\n                      }\n                    </h2>\n                    <p className=\"text-gray-600 mb-3\">{user.email}</p>\n                    <Badge variant={user.role === 'admin' ? 'default' : 'secondary'} className=\"mb-4\">\n                      {user.role === 'admin' ? 'Administrator' : 'User'}\n                    </Badge>\n                    \n                    <div className=\"space-y-3 text-sm text-gray-600\">\n                      <div className=\"flex items-center justify-center\">\n                        <Calendar className=\"h-4 w-4 mr-2\" />\n                        Member since {new Date(user.createdAt || Date.now()).toLocaleDateString()}\n                      </div>\n                      {user.role === 'admin' && (\n                        <div className=\"flex items-center justify-center\">\n                          <Shield className=\"h-4 w-4 mr-2\" />\n                          Full System Access\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Profile Form */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                \n                {/* Basic Information */}\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"flex items-center\">\n                        <User className=\"h-5 w-5 mr-2\" />\n                        Basic Information\n                      </CardTitle>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setIsEditing(!isEditing)}\n                      >\n                        {isEditing ? \"Cancel\" : \"Edit\"}\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <form onSubmit={handleProfileUpdate} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            First Name\n                          </label>\n                          <Input\n                            value={formData.firstName}\n                            onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n                            disabled={!isEditing}\n                            placeholder=\"Enter your first name\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Last Name\n                          </label>\n                          <Input\n                            value={formData.lastName}\n                            onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n                            disabled={!isEditing}\n                            placeholder=\"Enter your last name\"\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Email Address\n                        </label>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                          <Input\n                            value={formData.email}\n                            onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                            disabled={true} // Email typically can't be changed\n                            className=\"pl-10\"\n                          />\n                        </div>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Email address cannot be changed. Contact your administrator if needed.\n                        </p>\n                      </div>\n                      \n                      {isEditing && (\n                        <div className=\"flex justify-end\">\n                          <Button type=\"submit\">\n                            <Save className=\"h-4 w-4 mr-2\" />\n                            Save Changes\n                          </Button>\n                        </div>\n                      )}\n                    </form>\n                  </CardContent>\n                </Card>\n\n                {/* Security Settings */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Key className=\"h-5 w-5 mr-2\" />\n                      Security Settings\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h3 className=\"text-sm font-medium text-gray-900 mb-2\">Password</h3>\n                        <p className=\"text-sm text-gray-600 mb-3\">\n                          Keep your account secure by using a strong password\n                        </p>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => setShowPasswordForm(!showPasswordForm)}\n                        >\n                          Change Password\n                        </Button>\n                      </div>\n\n                      {showPasswordForm && (\n                        <>\n                          <Separator />\n                          <form onSubmit={handlePasswordChange} className=\"space-y-4\">\n                            <div>\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                Current Password\n                              </label>\n                              <Input\n                                type=\"password\"\n                                value={passwordData.currentPassword}\n                                onChange={(e) => setPasswordData({ ...passwordData, currentPassword: e.target.value })}\n                                placeholder=\"Enter current password\"\n                                required\n                              />\n                            </div>\n                            <div>\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                New Password\n                              </label>\n                              <Input\n                                type=\"password\"\n                                value={passwordData.newPassword}\n                                onChange={(e) => setPasswordData({ ...passwordData, newPassword: e.target.value })}\n                                placeholder=\"Enter new password\"\n                                required\n                                minLength={8}\n                              />\n                            </div>\n                            <div>\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                Confirm New Password\n                              </label>\n                              <Input\n                                type=\"password\"\n                                value={passwordData.confirmPassword}\n                                onChange={(e) => setPasswordData({ ...passwordData, confirmPassword: e.target.value })}\n                                placeholder=\"Confirm new password\"\n                                required\n                                minLength={8}\n                              />\n                            </div>\n                            <div className=\"flex justify-end space-x-3\">\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                onClick={() => setShowPasswordForm(false)}\n                              >\n                                Cancel\n                              </Button>\n                              <Button type=\"submit\">\n                                Update Password\n                              </Button>\n                            </div>\n                          </form>\n                        </>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Account Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Account Information</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Account ID</span>\n                        <span className=\"font-medium\">{user.id}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Account Type</span>\n                        <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                          {user.role === 'admin' ? 'Administrator' : 'Standard User'}\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Created</span>\n                        <span className=\"font-medium\">\n                          {new Date(user.createdAt || Date.now()).toLocaleDateString()}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Last Updated</span>\n                        <span className=\"font-medium\">\n                          {new Date(user.updatedAt || Date.now()).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15105},"client/src/pages/system-settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Settings, Server, Database, Mail, Shield, Globe, Save, RefreshCw } from \"lucide-react\";\n\nexport default function SystemSettings() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [settings, setSettings] = useState({\n    siteName: \"Knowledge Base Platform\",\n    siteDescription: \"A comprehensive knowledge management solution\",\n    allowRegistration: true,\n    requireEmailVerification: false,\n    defaultUserRole: \"user\",\n    maxFileSize: 10485760, // 10MB\n    allowedFileTypes: \".pdf,.doc,.docx,.txt,.png,.jpg,.jpeg\",\n    enableTeamsIntegration: false,\n    teamsWebhookUrl: \"\",\n    maintenanceMode: false,\n    backupFrequency: \"daily\",\n    sessionTimeout: 7200, // 2 hours\n    enableAuditLogging: true,\n  });\n\n  // Redirect to auth page if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation('/auth');\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast, setLocation]);\n\n  // Check admin access\n  useEffect(() => {\n    if (!isLoading && user && user.role !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required for this page\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation('/');\n      }, 500);\n    }\n  }, [user, isLoading, toast, setLocation]);\n\n  const handleSave = () => {\n    // In a real application, this would make an API call to save settings\n    toast({\n      title: \"Settings Saved\",\n      description: \"System settings have been updated successfully (demo mode)\",\n    });\n  };\n\n  const handleReset = () => {\n    setSettings({\n      siteName: \"Knowledge Base Platform\",\n      siteDescription: \"A comprehensive knowledge management solution\",\n      allowRegistration: true,\n      requireEmailVerification: false,\n      defaultUserRole: \"user\",\n      maxFileSize: 10485760,\n      allowedFileTypes: \".pdf,.doc,.docx,.txt,.png,.jpg,.jpeg\",\n      enableTeamsIntegration: false,\n      teamsWebhookUrl: \"\",\n      maintenanceMode: false,\n      backupFrequency: \"daily\",\n      sessionTimeout: 7200,\n      enableAuditLogging: true,\n    });\n    toast({\n      title: \"Settings Reset\",\n      description: \"All settings have been reset to defaults\",\n    });\n  };\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">System Settings</h1>\n                <p className=\"text-gray-600\">Configure system-wide settings and preferences.</p>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"outline\" onClick={handleReset}>\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                  Reset to Defaults\n                </Button>\n                <Button onClick={handleSave}>\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Save Changes\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* General Settings */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Globe className=\"h-5 w-5 mr-2\" />\n                    General Settings\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Site Name</label>\n                    <Input\n                      value={settings.siteName}\n                      onChange={(e) => setSettings({...settings, siteName: e.target.value})}\n                      placeholder=\"Knowledge Base Platform\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Site Description</label>\n                    <Textarea\n                      value={settings.siteDescription}\n                      onChange={(e) => setSettings({...settings, siteDescription: e.target.value})}\n                      placeholder=\"A comprehensive knowledge management solution\"\n                      rows={3}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium\">Maintenance Mode</label>\n                    <Switch\n                      checked={settings.maintenanceMode}\n                      onCheckedChange={(checked) => setSettings({...settings, maintenanceMode: checked})}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* User Management */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Shield className=\"h-5 w-5 mr-2\" />\n                    User Management\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium\">Allow Registration</label>\n                    <Switch\n                      checked={settings.allowRegistration}\n                      onCheckedChange={(checked) => setSettings({...settings, allowRegistration: checked})}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium\">Require Email Verification</label>\n                    <Switch\n                      checked={settings.requireEmailVerification}\n                      onCheckedChange={(checked) => setSettings({...settings, requireEmailVerification: checked})}\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Default User Role</label>\n                    <Select value={settings.defaultUserRole} onValueChange={(value) => setSettings({...settings, defaultUserRole: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"user\">User</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Session Timeout (seconds)</label>\n                    <Input\n                      type=\"number\"\n                      value={settings.sessionTimeout}\n                      onChange={(e) => setSettings({...settings, sessionTimeout: parseInt(e.target.value)})}\n                      placeholder=\"7200\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* File Management */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Server className=\"h-5 w-5 mr-2\" />\n                    File Management\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Max File Size (bytes)</label>\n                    <Input\n                      type=\"number\"\n                      value={settings.maxFileSize}\n                      onChange={(e) => setSettings({...settings, maxFileSize: parseInt(e.target.value)})}\n                      placeholder=\"10485760\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Current: {(settings.maxFileSize / 1024 / 1024).toFixed(1)} MB\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Allowed File Types</label>\n                    <Input\n                      value={settings.allowedFileTypes}\n                      onChange={(e) => setSettings({...settings, allowedFileTypes: e.target.value})}\n                      placeholder=\".pdf,.doc,.docx,.txt,.png,.jpg,.jpeg\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Comma-separated list of file extensions\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Integration Settings */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Mail className=\"h-5 w-5 mr-2\" />\n                    Integration Settings\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium\">Enable Teams Integration</label>\n                    <Switch\n                      checked={settings.enableTeamsIntegration}\n                      onCheckedChange={(checked) => setSettings({...settings, enableTeamsIntegration: checked})}\n                    />\n                  </div>\n                  {settings.enableTeamsIntegration && (\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Teams Webhook URL</label>\n                      <Input\n                        value={settings.teamsWebhookUrl}\n                        onChange={(e) => setSettings({...settings, teamsWebhookUrl: e.target.value})}\n                        placeholder=\"https://your-teams-webhook-url.com\"\n                      />\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* System Monitoring */}\n              <Card className=\"lg:col-span-2\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Database className=\"h-5 w-5 mr-2\" />\n                    System Monitoring\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Backup Frequency</label>\n                      <Select value={settings.backupFrequency} onValueChange={(value) => setSettings({...settings, backupFrequency: value})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"hourly\">Hourly</SelectItem>\n                          <SelectItem value=\"daily\">Daily</SelectItem>\n                          <SelectItem value=\"weekly\">Weekly</SelectItem>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <label className=\"text-sm font-medium\">Enable Audit Logging</label>\n                      <Switch\n                        checked={settings.enableAuditLogging}\n                        onCheckedChange={(checked) => setSettings({...settings, enableAuditLogging: checked})}\n                      />\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">99.9%</div>\n                      <div className=\"text-sm text-gray-600\">Uptime</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">2.3 GB</div>\n                      <div className=\"text-sm text-gray-600\">Storage Used</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-purple-600\">156</div>\n                      <div className=\"text-sm text-gray-600\">Active Sessions</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":14281},"client/src/pages/user-management.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { UserPlus, Edit, Shield } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function UserManagement() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [showPermissionDialog, setShowPermissionDialog] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<any>(null);\n  const [permissionData, setPermissionData] = useState({\n    userId: \"\",\n    categoryId: \"\",\n    permissionType: \"read\" as \"read\" | \"write\" | \"none\",\n  });\n\n  // Redirect to auth page if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation('/auth');\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast, setLocation]);\n\n  // Check admin access\n  useEffect(() => {\n    if (!isLoading && user && user.role !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required for this page\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation('/');\n      }, 500);\n    }\n  }, [user, isLoading, toast]);\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const setPermissionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/permissions\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Permission updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/permissions\"] });\n      setShowPermissionDialog(false);\n      resetPermissionForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update permission\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetPermissionForm = () => {\n    setPermissionData({\n      userId: \"\",\n      categoryId: \"\",\n      permissionType: \"read\",\n    });\n    setSelectedUser(null);\n  };\n\n  const handlePermissionSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!permissionData.userId || !permissionData.categoryId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select both user and category\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setPermissionMutation.mutate(permissionData);\n  };\n\n  const openPermissionDialog = (targetUser?: any) => {\n    if (targetUser) {\n      setSelectedUser(targetUser);\n      setPermissionData({ ...permissionData, userId: targetUser.id });\n    }\n    setShowPermissionDialog(true);\n  };\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (user.role !== 'admin') {\n    return null;\n  }\n\n  // Mock users data for demonstration (in a real app, this would come from an API)\n  const mockUsers = [\n    {\n      id: user.id,\n      name: user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email,\n      email: user.email,\n      role: user.role,\n      profileImageUrl: user.profileImageUrl,\n      lastLogin: \"2 hours ago\",\n      status: \"active\",\n    },\n    {\n      id: \"user-2\",\n      name: \"Sarah Wilson\",\n      email: \"sarah.wilson@company.com\",\n      role: \"user\",\n      profileImageUrl: null,\n      lastLogin: \"Yesterday\",\n      status: \"active\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">User Management</h1>\n                  <p className=\"text-gray-600\">Manage user accounts and permissions</p>\n                </div>\n                <div className=\"flex space-x-3\">\n                  <Dialog open={showPermissionDialog} onOpenChange={(open) => {\n                    if (!open) {\n                      setShowPermissionDialog(false);\n                      resetPermissionForm();\n                    }\n                  }}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\" onClick={() => openPermissionDialog()}>\n                        <Shield className=\"mr-2 h-4 w-4\" />\n                        Manage Permissions\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Manage User Permissions</DialogTitle>\n                      </DialogHeader>\n                      <form onSubmit={handlePermissionSubmit} className=\"space-y-4\">\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            User\n                          </label>\n                          <Select value={permissionData.userId} onValueChange={(value) => setPermissionData({ ...permissionData, userId: value })}>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select a user\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {mockUsers.filter(u => u.role !== 'admin').map((user) => (\n                                <SelectItem key={user.id} value={user.id}>\n                                  {user.name} ({user.email})\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Category\n                          </label>\n                          <Select value={permissionData.categoryId} onValueChange={(value) => setPermissionData({ ...permissionData, categoryId: value })}>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select a category\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {categories.map((category: any) => (\n                                <SelectItem key={category.id} value={category.id}>\n                                  {category.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Permission Type\n                          </label>\n                          <Select value={permissionData.permissionType} onValueChange={(value: \"read\" | \"write\" | \"none\") => setPermissionData({ ...permissionData, permissionType: value })}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"none\">No Access</SelectItem>\n                              <SelectItem value=\"read\">Read Only</SelectItem>\n                              <SelectItem value=\"write\">Read/Write</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"flex justify-end space-x-3 pt-4\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => setShowPermissionDialog(false)}\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            type=\"submit\"\n                            disabled={setPermissionMutation.isPending}\n                          >\n                            Update Permission\n                          </Button>\n                        </div>\n                      </form>\n                    </DialogContent>\n                  </Dialog>\n                  \n                  <Button>\n                    <UserPlus className=\"mr-2 h-4 w-4\" />\n                    Invite User\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Users Table */}\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">User</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Role</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Categories Access</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Last Login</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {mockUsers.map((targetUser) => (\n                        <tr key={targetUser.id} className=\"hover:bg-gray-50\">\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <Avatar className=\"h-10 w-10\">\n                                <AvatarImage src={targetUser.profileImageUrl || \"\"} alt={targetUser.name} />\n                                <AvatarFallback>\n                                  {targetUser.name.charAt(0).toUpperCase()}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div className=\"ml-4\">\n                                <div className=\"text-sm font-medium text-gray-900\">{targetUser.name}</div>\n                                <div className=\"text-sm text-gray-500\">{targetUser.email}</div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge variant={targetUser.role === 'admin' ? 'default' : 'secondary'}>\n                              {targetUser.role === 'admin' ? 'Admin' : 'User'}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {targetUser.role === 'admin' ? (\n                              <span className=\"text-gray-400\">All Categories</span>\n                            ) : (\n                              <div className=\"flex flex-wrap gap-1\">\n                                <Badge variant=\"outline\" style={{ borderColor: '#4CAF50', color: '#4CAF50' }}>Operations</Badge>\n                                <Badge variant=\"outline\" style={{ borderColor: '#FFC107', color: '#FFC107' }}>Security</Badge>\n                                <span className=\"text-xs text-gray-400\">+2 more</span>\n                              </div>\n                            )}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{targetUser.lastLogin}</td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge variant=\"outline\" className=\"bg-green-100 text-green-800 border-green-200\">\n                              Active\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            <div className=\"flex space-x-2\">\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Edit className=\"h-4 w-4 mr-1\" />\n                                Edit\n                              </Button>\n                              {targetUser.role !== 'admin' && (\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => openPermissionDialog(targetUser)}\n                                >\n                                  <Shield className=\"h-4 w-4 mr-1\" />\n                                  Permissions\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15230},"client/src/components/layout/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Bell, BookOpen, ChevronDown } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Navbar() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [showUserMenu, setShowUserMenu] = useState(false);\n\n  return (\n    <nav className=\"bg-white shadow-sm border-b border-gray-200 fixed w-full top-0 z-40\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0 flex items-center cursor-pointer\" onClick={() => setLocation('/')}>\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <BookOpen className=\"text-white h-5 w-5\" />\n              </div>\n              <span className=\"ml-3 text-xl font-semibold text-gray-900\">Knowledge Base</span>\n            </div>\n          </div>\n          \n          {/* Search Bar */}\n          <div className=\"flex-1 max-w-lg mx-8\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search articles, categories...\"\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n          \n          {/* User Menu */}\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n              <Bell className=\"h-5 w-5\" />\n              <span className=\"absolute top-1 right-1 block h-2 w-2 rounded-full bg-error\"></span>\n            </Button>\n            \n            <div className=\"relative\">\n              <Button\n                variant=\"ghost\"\n                className=\"flex items-center space-x-3 p-2\"\n                onClick={() => setShowUserMenu(!showUserMenu)}\n              >\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarImage src={user?.profileImageUrl || \"\"} alt={user?.firstName || \"User\"} />\n                  <AvatarFallback>\n                    {user?.firstName?.charAt(0) || user?.email?.charAt(0) || \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"hidden sm:block text-left\">\n                  <div className=\"text-sm font-medium text-gray-700\">\n                    {user?.firstName && user?.lastName \n                      ? `${user.firstName} ${user.lastName}` \n                      : user?.email || \"User\"\n                    }\n                  </div>\n                </div>\n                <Badge variant={user?.role === 'admin' ? 'default' : 'secondary'} className=\"hidden sm:inline-flex\">\n                  {user?.role || 'User'}\n                </Badge>\n                <ChevronDown className=\"h-4 w-4 text-gray-400\" />\n              </Button>\n              \n              {/* User Dropdown Menu */}\n              {showUserMenu && (\n                <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 z-50\">\n                  <div className=\"py-1\">\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                      onClick={() => {\n                        setLocation('/profile');\n                        setShowUserMenu(false);\n                      }}\n                    >\n                      Profile Settings\n                    </Button>\n                    <div className=\"border-t border-gray-100 my-1\" />\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                      onClick={() => {\n                        setShowUserMenu(false);\n                        window.location.href = '/api/logout';\n                      }}\n                    >\n                      Sign Out\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4560},"client/src/components/layout/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\nimport { \n  Home, \n  FolderOpen, \n  FileText, \n  Upload, \n  Users, \n  Shield, \n  Settings,\n  ChevronRight,\n  ChevronDown,\n  Folder,\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { Category } from \"@shared/schema\";\n\ninterface CategoryTreeProps {\n  categories: Category[];\n  parentId?: number | null;\n  level?: number;\n}\n\nfunction CategoryTree({ categories, parentId = null, level = 0 }: CategoryTreeProps) {\n  const [location, setLocation] = useLocation();\n  const [expandedCategories, setExpandedCategories] = useState<Set<number>>(new Set());\n\n  const filteredCategories = categories.filter(cat => cat.parentId === parentId);\n\n  const toggleExpanded = (categoryId: number) => {\n    const newExpanded = new Set(expandedCategories);\n    if (newExpanded.has(categoryId)) {\n      newExpanded.delete(categoryId);\n    } else {\n      newExpanded.add(categoryId);\n    }\n    setExpandedCategories(newExpanded);\n  };\n\n  const hasChildren = (categoryId: number) => {\n    return categories.some(cat => cat.parentId === categoryId);\n  };\n\n  if (filteredCategories.length === 0) return null;\n\n  return (\n    <div className={level > 0 ? \"ml-4\" : \"\"}>\n      {filteredCategories.map((category) => {\n        const children = categories.filter(cat => cat.parentId === category.id);\n        const isExpanded = expandedCategories.has(category.id);\n        const categoryPath = `/categories/${category.id}`;\n        \n        return (\n          <div key={category.id} className=\"space-y-1\">\n            <div className=\"flex items-center\">\n              {hasChildren(category.id) && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"p-0 h-6 w-6 mr-1\"\n                  onClick={() => toggleExpanded(category.id)}\n                >\n                  {isExpanded ? (\n                    <ChevronDown className=\"h-3 w-3\" />\n                  ) : (\n                    <ChevronRight className=\"h-3 w-3\" />\n                  )}\n                </Button>\n              )}\n              <Button\n                variant={location === categoryPath ? \"default\" : \"ghost\"}\n                className=\"w-full justify-start text-sm h-8 px-2\"\n                onClick={() => setLocation(categoryPath)}\n              >\n                <Folder className=\"mr-2 h-3 w-3\" />\n                {category.name}\n              </Button>\n            </div>\n            {isExpanded && children.length > 0 && (\n              <CategoryTree \n                categories={categories} \n                parentId={category.id} \n                level={level + 1} \n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default function Sidebar() {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats\"],\n    retry: false,\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const navItems = [\n    { path: \"/\", icon: Home, label: \"Dashboard\" },\n    { path: \"/categories\", icon: FolderOpen, label: \"Categories\" },\n    { path: \"/articles\", icon: FileText, label: \"Articles\" },\n    { path: \"/files\", icon: Upload, label: \"File Library\" },\n  ];\n\n  const adminNavItems = [\n    { path: \"/users\", icon: Users, label: \"User Management\" },\n    { path: \"/permissions\", icon: Shield, label: \"Permissions\" },\n    { path: \"/system-settings\", icon: Settings, label: \"System Settings\" },\n  ];\n\n  return (\n    <aside className=\"w-64 bg-white shadow-sm border-r border-gray-200 overflow-y-auto\">\n      <div className=\"p-4\">\n        <nav className=\"space-y-2\">\n          {navItems.map((item) => (\n            <Button\n              key={item.path}\n              variant={location === item.path ? \"default\" : \"ghost\"}\n              className=\"w-full justify-start\"\n              onClick={() => setLocation(item.path)}\n            >\n              <item.icon className=\"mr-3 h-4 w-4\" />\n              {item.label}\n            </Button>\n          ))}\n          \n          {/* Categories Section */}\n          {categories.length > 0 && (\n            <div className=\"pt-4 border-t border-gray-200\">\n              <p className=\"px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2\">\n                Knowledge Areas\n              </p>\n              <div className=\"space-y-1\">\n                <CategoryTree categories={categories} />\n              </div>\n            </div>\n          )}\n          \n          {/* Admin Only Section */}\n          {user?.role === 'admin' && (\n            <div className=\"pt-4 border-t border-gray-200\">\n              <p className=\"px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2\">\n                Administration\n              </p>\n              <div className=\"space-y-1\">\n                {adminNavItems.map((item) => (\n                  <Button\n                    key={item.path}\n                    variant={location === item.path ? \"default\" : \"ghost\"}\n                    className=\"w-full justify-start\"\n                    onClick={() => setLocation(item.path)}\n                  >\n                    <item.icon className=\"mr-3 h-4 w-4\" />\n                    {item.label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n        </nav>\n        \n        {/* Quick Stats */}\n        <Card className=\"mt-8\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"text-sm font-medium text-gray-900 mb-3\">Quick Stats</h3>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Total Articles</span>\n                <span className=\"font-medium\">{stats?.totalArticles || 0}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Categories</span>\n                <span className=\"font-medium\">{stats?.totalCategories || 0}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Active Users</span>\n                <span className=\"font-medium\">{stats?.activeUsers || 0}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </aside>\n  );\n}","size_bytes":6634},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/file-upload-zone.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Upload, File, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { UploadResult } from \"@uppy/core\";\n\ninterface FileUploadZoneProps {\n  onFilesUploaded?: (files: any[]) => void;\n  articleId?: string;\n  categoryId?: string;\n}\n\nexport default function FileUploadZone({ onFilesUploaded, articleId, categoryId }: FileUploadZoneProps) {\n  const [uploadedFiles, setUploadedFiles] = useState<any[]>([]);\n  const { toast } = useToast();\n\n  const handleGetUploadParameters = useCallback(async () => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/objects/upload\", {});\n      const data = await response.json();\n      return {\n        method: 'PUT' as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      console.error(\"Error getting upload parameters:\", error);\n      throw error;\n    }\n  }, []);\n\n  const handleUploadComplete = useCallback(async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    try {\n      const files = [];\n      \n      for (const file of result.successful) {\n        // Register file with backend\n        const fileResponse = await apiRequest(\"PUT\", \"/api/files\", {\n          fileURL: file.uploadURL,\n          filename: file.name,\n          originalName: file.name,\n          fileType: file.type,\n          fileSize: file.size,\n          articleId,\n          categoryId,\n        });\n        \n        const fileData = await fileResponse.json();\n        files.push(fileData.file);\n      }\n      \n      setUploadedFiles(prev => [...prev, ...files]);\n      onFilesUploaded?.(files);\n      \n      toast({\n        title: \"Success\",\n        description: `${files.length} file(s) uploaded successfully`,\n      });\n    } catch (error) {\n      console.error(\"Error completing upload:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete upload\",\n        variant: \"destructive\",\n      });\n    }\n  }, [articleId, categoryId, onFilesUploaded, toast]);\n\n  const removeFile = (fileId: string) => {\n    setUploadedFiles(prev => prev.filter(file => file.id !== fileId));\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card className=\"border-2 border-dashed border-gray-300 hover:border-primary transition-colors\">\n        <CardContent className=\"p-6 text-center\">\n          <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-gray-600\">Drop files here or</p>\n            <ObjectUploader\n              maxNumberOfFiles={10}\n              maxFileSize={10 * 1024 * 1024} // 10MB\n              onGetUploadParameters={handleGetUploadParameters}\n              onComplete={handleUploadComplete}\n            >\n              <span className=\"text-primary hover:text-blue-700 font-medium text-sm\">\n                browse to upload\n              </span>\n            </ObjectUploader>\n            <p className=\"text-xs text-gray-500\">\n              Supports PDF, DOC, DOCX, images, videos (max 10MB each)\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Uploaded Files List */}\n      {uploadedFiles.length > 0 && (\n        <Card>\n          <CardContent className=\"p-4\">\n            <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Uploaded Files</h4>\n            <div className=\"space-y-2\">\n              {uploadedFiles.map((file) => (\n                <div key={file.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-md\">\n                  <div className=\"flex items-center space-x-3\">\n                    <File className=\"h-5 w-5 text-gray-400\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">{file.originalName}</p>\n                      <p className=\"text-xs text-gray-500\">\n                        {(file.fileSize / 1024 / 1024).toFixed(2)} MB\n                      </p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => removeFile(file.id)}\n                    className=\"text-red-600 hover:text-red-700\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":4663},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/rich-text-editor.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Bold, \n  Italic, \n  Underline, \n  List, \n  ListOrdered, \n  Link, \n  Image, \n  Code, \n  Table \n} from \"lucide-react\";\n\ninterface RichTextEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n}\n\nexport default function RichTextEditor({ value, onChange, placeholder }: RichTextEditorProps) {\n  const editorRef = useRef<HTMLDivElement>(null);\n\n  const execCommand = (command: string, value?: string) => {\n    document.execCommand(command, false, value);\n    if (editorRef.current) {\n      onChange(editorRef.current.innerHTML);\n    }\n  };\n\n  const handleInput = () => {\n    if (editorRef.current) {\n      onChange(editorRef.current.innerHTML);\n    }\n  };\n\n  return (\n    <div className=\"border border-gray-300 rounded-md\">\n      {/* Editor Toolbar */}\n      <div className=\"border-b border-gray-300 bg-gray-50 p-2 flex flex-wrap items-center space-x-1\">\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => execCommand('bold')}\n          className=\"p-2 hover:bg-white\"\n        >\n          <Bold className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => execCommand('italic')}\n          className=\"p-2 hover:bg-white\"\n        >\n          <Italic className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => execCommand('underline')}\n          className=\"p-2 hover:bg-white\"\n        >\n          <Underline className=\"h-4 w-4\" />\n        </Button>\n        \n        <div className=\"w-px h-6 bg-gray-300 mx-2\" />\n        \n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => execCommand('insertUnorderedList')}\n          className=\"p-2 hover:bg-white\"\n        >\n          <List className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => execCommand('insertOrderedList')}\n          className=\"p-2 hover:bg-white\"\n        >\n          <ListOrdered className=\"h-4 w-4\" />\n        </Button>\n        \n        <div className=\"w-px h-6 bg-gray-300 mx-2\" />\n        \n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => {\n            const url = prompt('Enter URL:');\n            if (url) execCommand('createLink', url);\n          }}\n          className=\"p-2 hover:bg-white\"\n        >\n          <Link className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => {\n            const url = prompt('Enter image URL:');\n            if (url) execCommand('insertImage', url);\n          }}\n          className=\"p-2 hover:bg-white\"\n        >\n          <Image className=\"h-4 w-4\" />\n        </Button>\n        \n        <div className=\"w-px h-6 bg-gray-300 mx-2\" />\n        \n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => execCommand('formatBlock', 'pre')}\n          className=\"p-2 hover:bg-white\"\n        >\n          <Code className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => {\n            // Basic table insertion\n            const table = '<table border=\"1\"><tr><td>Cell 1</td><td>Cell 2</td></tr><tr><td>Cell 3</td><td>Cell 4</td></tr></table>';\n            execCommand('insertHTML', table);\n          }}\n          className=\"p-2 hover:bg-white\"\n        >\n          <Table className=\"h-4 w-4\" />\n        </Button>\n      </div>\n      \n      {/* Editor Content Area */}\n      <div\n        ref={editorRef}\n        contentEditable\n        className=\"min-h-96 p-4 focus:outline-none focus:ring-2 focus:ring-primary\"\n        dangerouslySetInnerHTML={{ __html: value }}\n        onInput={handleInput}\n        style={{ minHeight: '24rem' }}\n        data-placeholder={placeholder}\n      />\n      \n      <style jsx>{`\n        div[contenteditable]:empty:before {\n          content: attr(data-placeholder);\n          color: #9CA3AF;\n          font-style: italic;\n          pointer-events: none;\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":4449},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}